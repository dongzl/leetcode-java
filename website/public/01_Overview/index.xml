<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第一章 on LeetCode Cookbook</title>
    <link>https://dongzl.github.io/leetcode-java/01_Overview/</link>
    <description>Recent content in 第一章 on LeetCode Cookbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://dongzl.github.io/leetcode-java/01_Overview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据结构知识</title>
      <link>https://dongzl.github.io/leetcode-java/01_Overview/Data_Structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongzl.github.io/leetcode-java/01_Overview/Data_Structure/</guid>
      <description>数据结构知识 #  以下是笔者整理的数据结构相关的知识。希望能把常见的数据结构都枚举穷尽。如有遗漏，欢迎大家赐教，提 PR。相关题目还在慢慢整理中，讲解的文章还在创作中。
 刷题只是提升算法能力的手段，最终目的应该是提升自我的思维能力，知识需要凝结成块，那么就把这些总结在第一章这两节中，让它得到升华吧~希望读者在刷完题之后再回过头来看这个表格，能很清晰的梳理自己的知识体系，查缺补漏，尽早完善。
    数据结构 变种 相关题目 讲解文章     顺序线性表：向量 Vector      单链表
Singly Linked List 1. 双向链表 Double Linked Lists
2. 静态链表 Static List
3. 对称矩阵 Symmetric Matrix
4. 稀疏矩阵 Sparse Matrix     哈希表
Hash Table 1. 散列函数 Hash Function
2. 解决碰撞/填充因子
     栈和队列
Stack &amp;amp; Queue 1. 广义栈</description>
    </item>
    
    <item>
      <title>算法知识</title>
      <link>https://dongzl.github.io/leetcode-java/01_Overview/Algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dongzl.github.io/leetcode-java/01_Overview/Algorithm/</guid>
      <description>算法知识 #  以下是笔者整理的算法相关的知识。希望能把常见的算法都枚举穷尽。如有遗漏，欢迎大家赐教，提 PR。相关题目还在慢慢整理中，讲解的文章还在创作中。
 刷题只是提升算法能力的手段，最终目的应该是提升自我的思维能力，知识需要凝结成块，那么就把这些总结在第一章这两节中，让它得到升华吧~希望读者在刷完题之后再回过头来看这个表格，能很清晰的梳理自己的知识体系，查缺补漏，尽早完善。
    算法 具体类型 相关题目 讲解文章     排序算法 1. 冒泡排序
2. 插入排序
3. 选择排序
4. 希尔 Shell 排序
5. 快速排序
6. 归并排序
7. 堆排序
8. 线性排序算法
9. 自省排序
10. 间接排序
11. 计数排序
12. 基数排序
13. 桶排序
14. 外部排序 - k 路归并败者树
15. 外部排序 - 最佳归并树     递归与分治  1. 二分搜索/查找
2. 大整数的乘法
3. Strassen 矩阵乘法</description>
    </item>
    
  </channel>
</rss>
